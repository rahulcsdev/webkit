# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  code: String
  password: PasswordState
  designation: String
  File(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  FileCount(where: FileWhereInput! = {}): Int
  role: [String!]
  dateOfJoining: DateTime
  reportingManager: User
  createdDate: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  code: StringFilter
  password: PasswordFilter
  designation: StringFilter
  File: FileManyRelationFilter
  dateOfJoining: DateTimeNullableFilter
  reportingManager: UserWhereInput
  createdDate: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  code: OrderDirection
  designation: OrderDirection
  dateOfJoining: OrderDirection
  createdDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  code: String
  password: String
  designation: String
  File: FileRelateToManyForUpdateInput
  role: [String!]
  dateOfJoining: DateTime
  reportingManager: UserRelateToOneForUpdateInput
  createdDate: DateTime
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  code: String
  password: String
  designation: String
  File: FileRelateToManyForCreateInput
  role: [String!]
  dateOfJoining: DateTime
  reportingManager: UserRelateToOneForCreateInput
  createdDate: DateTime
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Project {
  id: ID!
  name: String
  member(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  memberCount(where: UserWhereInput! = {}): Int
  createAt: DateTime
  projectManager: User
  code: String
  File(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  FileCount(where: FileWhereInput! = {}): Int
  status: String
  projectType: String
  projectDiscription: String
  startDate: DateTime
  endDate: DateTime
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  member: UserManyRelationFilter
  createAt: DateTimeNullableFilter
  projectManager: UserWhereInput
  code: StringFilter
  File: FileManyRelationFilter
  status: StringNullableFilter
  projectType: StringNullableFilter
  projectDiscription: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createAt: OrderDirection
  code: OrderDirection
  status: OrderDirection
  projectType: OrderDirection
  projectDiscription: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input ProjectUpdateInput {
  name: String
  member: UserRelateToManyForUpdateInput
  createAt: DateTime
  projectManager: UserRelateToOneForUpdateInput
  code: String
  File: FileRelateToManyForUpdateInput
  status: String
  projectType: String
  projectDiscription: String
  startDate: DateTime
  endDate: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  member: UserRelateToManyForCreateInput
  createAt: DateTime
  projectManager: UserRelateToOneForCreateInput
  code: String
  File: FileRelateToManyForCreateInput
  status: String
  projectType: String
  projectDiscription: String
  startDate: DateTime
  endDate: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Milestone {
  id: ID!
  name: String
  project: Project
  code: String
  File(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  FileCount(where: FileWhereInput! = {}): Int
  status: String
  startDate: DateTime
  endDate: DateTime
}

input MilestoneWhereUniqueInput {
  id: ID
}

input MilestoneWhereInput {
  AND: [MilestoneWhereInput!]
  OR: [MilestoneWhereInput!]
  NOT: [MilestoneWhereInput!]
  id: IDFilter
  name: StringFilter
  project: ProjectWhereInput
  code: StringFilter
  File: FileManyRelationFilter
  status: StringNullableFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
}

input MilestoneOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  status: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input MilestoneUpdateInput {
  name: String
  project: ProjectRelateToOneForUpdateInput
  code: String
  File: FileRelateToManyForUpdateInput
  status: String
  startDate: DateTime
  endDate: DateTime
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input MilestoneUpdateArgs {
  where: MilestoneWhereUniqueInput!
  data: MilestoneUpdateInput!
}

input MilestoneCreateInput {
  name: String
  project: ProjectRelateToOneForCreateInput
  code: String
  File: FileRelateToManyForCreateInput
  status: String
  startDate: DateTime
  endDate: DateTime
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Task {
  id: ID!
  name: String
  code: String
  File(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  FileCount(where: FileWhereInput! = {}): Int
  discription: String
  project: Project
  priority: String
  status: String
  milestone: Milestone
  startDate: String
  endDate: String
  estimateTime: String
  taskType: String
}

input TaskWhereUniqueInput {
  id: ID
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  File: FileManyRelationFilter
  discription: StringFilter
  project: ProjectWhereInput
  priority: StringNullableFilter
  status: StringNullableFilter
  milestone: MilestoneWhereInput
  startDate: StringFilter
  endDate: StringFilter
  estimateTime: StringFilter
  taskType: StringNullableFilter
}

input TaskOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  discription: OrderDirection
  priority: OrderDirection
  status: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  estimateTime: OrderDirection
  taskType: OrderDirection
}

input TaskUpdateInput {
  name: String
  code: String
  File: FileRelateToManyForUpdateInput
  discription: String
  project: ProjectRelateToOneForUpdateInput
  priority: String
  status: String
  milestone: MilestoneRelateToOneForUpdateInput
  startDate: String
  endDate: String
  estimateTime: String
  taskType: String
}

input MilestoneRelateToOneForUpdateInput {
  create: MilestoneCreateInput
  connect: MilestoneWhereUniqueInput
  disconnect: Boolean
}

input TaskUpdateArgs {
  where: TaskWhereUniqueInput!
  data: TaskUpdateInput!
}

input TaskCreateInput {
  name: String
  code: String
  File: FileRelateToManyForCreateInput
  discription: String
  project: ProjectRelateToOneForCreateInput
  priority: String
  status: String
  milestone: MilestoneRelateToOneForCreateInput
  startDate: String
  endDate: String
  estimateTime: String
  taskType: String
}

input MilestoneRelateToOneForCreateInput {
  create: MilestoneCreateInput
  connect: MilestoneWhereUniqueInput
}

type TimeEntery {
  id: ID!
  project: Project
  task: Task
  activities: String
  code: String
  File(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  FileCount(where: FileWhereInput! = {}): Int
  duration: String
  projectType: String
  projectManager: User
  userName: User
  reviewStatus: String
  remarks: String
  reviewedBy: User
  reviewedAt: String
  date: String
}

input TimeEnteryWhereUniqueInput {
  id: ID
}

input TimeEnteryWhereInput {
  AND: [TimeEnteryWhereInput!]
  OR: [TimeEnteryWhereInput!]
  NOT: [TimeEnteryWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
  task: TaskWhereInput
  activities: StringFilter
  code: StringFilter
  File: FileManyRelationFilter
  duration: StringFilter
  projectType: StringNullableFilter
  projectManager: UserWhereInput
  userName: UserWhereInput
  reviewStatus: StringNullableFilter
  remarks: StringFilter
  reviewedBy: UserWhereInput
  reviewedAt: StringFilter
  date: StringFilter
}

input TimeEnteryOrderByInput {
  id: OrderDirection
  activities: OrderDirection
  code: OrderDirection
  duration: OrderDirection
  projectType: OrderDirection
  reviewStatus: OrderDirection
  remarks: OrderDirection
  reviewedAt: OrderDirection
  date: OrderDirection
}

input TimeEnteryUpdateInput {
  project: ProjectRelateToOneForUpdateInput
  task: TaskRelateToOneForUpdateInput
  activities: String
  code: String
  File: FileRelateToManyForUpdateInput
  duration: String
  projectType: String
  projectManager: UserRelateToOneForUpdateInput
  userName: UserRelateToOneForUpdateInput
  reviewStatus: String
  remarks: String
  reviewedBy: UserRelateToOneForUpdateInput
  reviewedAt: String
  date: String
}

input TaskRelateToOneForUpdateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
  disconnect: Boolean
}

input TimeEnteryUpdateArgs {
  where: TimeEnteryWhereUniqueInput!
  data: TimeEnteryUpdateInput!
}

input TimeEnteryCreateInput {
  project: ProjectRelateToOneForCreateInput
  task: TaskRelateToOneForCreateInput
  activities: String
  code: String
  File: FileRelateToManyForCreateInput
  duration: String
  projectType: String
  projectManager: UserRelateToOneForCreateInput
  userName: UserRelateToOneForCreateInput
  reviewStatus: String
  remarks: String
  reviewedBy: UserRelateToOneForCreateInput
  reviewedAt: String
  date: String
}

input TaskRelateToOneForCreateInput {
  create: TaskCreateInput
  connect: TaskWhereUniqueInput
}

type File {
  id: ID!
  documents: FileFieldOutput
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
}

input FileOrderByInput {
  id: OrderDirection
}

input FileUpdateInput {
  documents: FileFieldInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  documents: FileFieldInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createMilestone(data: MilestoneCreateInput!): Milestone
  createMilestones(data: [MilestoneCreateInput!]!): [Milestone]
  updateMilestone(where: MilestoneWhereUniqueInput!, data: MilestoneUpdateInput!): Milestone
  updateMilestones(data: [MilestoneUpdateArgs!]!): [Milestone]
  deleteMilestone(where: MilestoneWhereUniqueInput!): Milestone
  deleteMilestones(where: [MilestoneWhereUniqueInput!]!): [Milestone]
  createTask(data: TaskCreateInput!): Task
  createTasks(data: [TaskCreateInput!]!): [Task]
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task
  updateTasks(data: [TaskUpdateArgs!]!): [Task]
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTasks(where: [TaskWhereUniqueInput!]!): [Task]
  createTimeEntery(data: TimeEnteryCreateInput!): TimeEntery
  createTimeEnteries(data: [TimeEnteryCreateInput!]!): [TimeEntery]
  updateTimeEntery(where: TimeEnteryWhereUniqueInput!, data: TimeEnteryUpdateInput!): TimeEntery
  updateTimeEnteries(data: [TimeEnteryUpdateArgs!]!): [TimeEntery]
  deleteTimeEntery(where: TimeEnteryWhereUniqueInput!): TimeEntery
  deleteTimeEnteries(where: [TimeEnteryWhereUniqueInput!]!): [TimeEntery]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  milestones(where: MilestoneWhereInput! = {}, orderBy: [MilestoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MilestoneWhereUniqueInput): [Milestone!]
  milestone(where: MilestoneWhereUniqueInput!): Milestone
  milestonesCount(where: MilestoneWhereInput! = {}): Int
  tasks(where: TaskWhereInput! = {}, orderBy: [TaskOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TaskWhereUniqueInput): [Task!]
  task(where: TaskWhereUniqueInput!): Task
  tasksCount(where: TaskWhereInput! = {}): Int
  timeEnteries(where: TimeEnteryWhereInput! = {}, orderBy: [TimeEnteryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TimeEnteryWhereUniqueInput): [TimeEntery!]
  timeEntery(where: TimeEnteryWhereUniqueInput!): TimeEntery
  timeEnteriesCount(where: TimeEnteryWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
